{"version":3,"sources":["redux/configureStore.js","redux/reducers/index.js","redux/reducers/markSpace.js","redux/reducers/reset.js","redux/selectors/getWinningCombination.js","redux/selectors/getIsGameOver.js","components/Space.js","redux/actions/markSpace.js","redux/actions/reset.js","components/Row.js","redux/selectors/getWinner.js","components/App.js","index.js"],"names":["initialState","reducers","state","arguments","length","undefined","turns","action","type","position","Object","objectSpread","player","some","turn","concat","toConsumableArray","markSpace","payload","getWinningCombination","positionOne","positionTwo","positionThree","markedSpaces","hasPositionTwo","includes","hasPositionThree","getPlayerWinningCombination","i","winningCombination","createSelector","filter","map","sort","playerOneMarkedSpaces","playerTwoMarkedSpaces","playerOneWinningCombination","playerTwoWinningCombination","hasNoMoreTurns","connect","ownProps","markedBy","isGameOver","getIsGameOver","dispatch","handleClick","handleReset","_ref","hasBorderRight","hasBorderTop","btnClass","classNames","position-btn","border-top","border-right","marked-1","marked-2","react_default","a","createElement","className","onClick","Row","positions","components_Space","key","firstMoveInWinningCombination","parseInt","winningCombinationFirstTurnIndex","findIndex","winner","getWinner","headingText","headingTextClass","heading-text","winner-2","winnerStreakClass","join","react","components_Row","src","title","frameBorder","scrolling","width","height","store","createStore","rootReducer","render","es","src_components_App","document","getElementById"],"mappings":"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","file":"static/js/main.dffc31d7.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\nimport rootReducer from './reducers';\n\nexport default (initialState) => {\n  return createStore(\n    rootReducer,\n    initialState,\n  );\n}\n","import markSpace from './markSpace';\nimport reset from './reset';\n\nexport default (state = { turns: [] }, action) => {\n  switch (action.type) {\n    case 'MARK_SPACE':\n      return markSpace(state, action.payload.position);\n    case 'RESET':\n      return reset();\n    default:\n      return state;\n  }\n};\n","export default (state, position) => {\n  if (state.turns.length === 0) {\n    return {\n      ...state,\n      turns: [{\n        player: 1,\n        position\n      }]\n    };\n  }\n\n  const isMarked = state.turns.some(turn => turn.position === position);\n  if (isMarked) {\n    return state;\n  }\n\n  const newState = {\n    ...state,\n    turns: [\n      ...state.turns,\n      {\n        player: state.turns[state.turns.length - 1].player === 1 ? 2 : 1,\n        position\n      }\n    ]\n  };\n\n  return newState;\n};\n","export default () => ({\n  turns: [],\n});\n","import { createSelector } from 'reselect';\n\nconst getWinningCombination = (positionOne, positionTwo, positionThree, markedSpaces) => {\n  const hasPositionTwo = markedSpaces.includes(positionTwo);\n  const hasPositionThree = markedSpaces.includes(positionThree);\n\n  if (hasPositionTwo && hasPositionThree) {\n    return [\n      positionOne,\n      positionTwo,\n      positionThree\n    ];\n  }\n\n  return null;\n};\n\nconst getPlayerWinningCombination = (markedSpaces) => {\n  for (let i = 0; i < markedSpaces.length; i += 1) {\n    let position = markedSpaces[i];\n\n    // horizontal win\n    if (position === 1 || position === 4 || position === 7) {\n      const winningCombination = getWinningCombination(position, position + 1, position + 2, markedSpaces);\n\n      if (winningCombination) {\n        return winningCombination;\n      }\n    }\n\n    // vertical win\n    if (position === 1 || position === 2 || position === 3) {\n      const winningCombination = getWinningCombination(position, position + 3, position + 6, markedSpaces);\n\n      if (winningCombination) {\n        return winningCombination;\n      }\n    }\n\n    // diagonal (top left to bottom right) win\n    if (position === 1) {\n      const winningCombination = getWinningCombination(position, 5, 9, markedSpaces);\n\n      if (winningCombination) {\n        return winningCombination;\n      }\n    }\n\n    // diagonal (bottom left to top right) win\n    if (position === 3) {\n      const winningCombination = getWinningCombination(position, 5, 7, markedSpaces);\n\n      if (winningCombination) {\n        return winningCombination;\n      }\n    }\n  }\n\n  return null;\n};\n\nconst getPlayerOneMarkedSpaces = state => state.turns\n  .filter(turn => turn.player === 1)\n  .map(turn => turn.position)\n  .sort();\n\nconst getPlayerTwoMarkedSpaces = state => state.turns\n  .filter(turn => turn.player === 2)\n  .map(turn => turn.position)\n  .sort();\n\nexport default createSelector(\n  [getPlayerOneMarkedSpaces, getPlayerTwoMarkedSpaces],\n  (playerOneMarkedSpaces, playerTwoMarkedSpaces) => {\n    const playerOneWinningCombination = getPlayerWinningCombination(playerOneMarkedSpaces);\n    if (playerOneWinningCombination) {\n      return playerOneWinningCombination;\n    }\n\n    const playerTwoWinningCombination = getPlayerWinningCombination(playerTwoMarkedSpaces);\n    if (playerTwoWinningCombination) {\n      return playerTwoWinningCombination;\n    }\n\n    return null;\n  }\n);\n","import { createSelector } from 'reselect';\n\nimport getWinningCombination from './getWinningCombination';\n\nconst getHasNoMoreTurns = state => state.turns.length === 9;\n\nexport default createSelector(\n  [getWinningCombination, getHasNoMoreTurns],\n  (winningCombination, hasNoMoreTurns) => {\n    return winningCombination !== null || hasNoMoreTurns;\n  }\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\n\nimport markSpace from '../redux/actions/markSpace';\nimport reset from '../redux/actions/reset';\nimport getIsGameOver from '../redux/selectors/getIsGameOver';\n\nconst Space = ({ hasBorderRight, hasBorderTop, handleClick, handleReset, isGameOver, markedBy, position }) => {\n  const btnClass = classNames({\n    'position-btn': true,\n    'border-top': hasBorderTop,\n    'border-right': hasBorderRight,\n    'marked-1': markedBy === 1,\n    'marked-2': markedBy === 2,\n  });\n\n  const onMarkSpace = () => {\n    if (isGameOver) {\n      return handleReset();\n    }\n\n    if (markedBy) {\n      return undefined;\n    }\n\n    return handleClick();\n  }\n\n  return (\n    <li className=\"position\">\n      <button\n        className={btnClass}\n        type=\"button\"\n        onClick={onMarkSpace}\n      >\n        <span className=\"sr-only\">Position {position} of 9</span>\n      </button>\n    </li>\n  );\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  let markedBy;\n\n  state.turns.some(turn => {\n    if (turn.position === ownProps.position) {\n      markedBy = turn.player;\n      return true;\n    }\n\n    return false;\n  });\n\n  return {\n    isGameOver: getIsGameOver(state),\n    markedBy\n  };\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  handleClick: () => dispatch(markSpace(ownProps.position)),\n  handleReset: () => dispatch(reset())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Space);\n","export default (position) => ({\n  type: 'MARK_SPACE',\n  payload: {\n    position\n  }\n});\n","export default () => ({\n  type: 'RESET'\n});\n","import React from 'react';\n\nimport Space from './Space';\n\nconst Row = ({ positions }) => {\n  return (\n    <ol className=\"position-row\">\n      {positions.map(position => {\n        return (\n          <Space\n            key={position}\n            position={position}\n            hasBorderTop={position !== 1 && position !== 2 && position !== 3}\n            hasBorderRight={position !== 3 && position !== 6 && position !== 9}\n          />\n        );\n      })}\n    </ol>\n  );\n}\n\nexport default Row;\n","import { createSelector } from 'reselect';\n\nimport getWinningCombination from './getWinningCombination';\n\nconst getTurns = state => state.turns;\n\nexport default createSelector(\n  [getWinningCombination, getTurns],\n  (winningCombination, turns) => {\n    if (winningCombination === null) {\n      return null;\n    }\n\n    const firstMoveInWinningCombination = parseInt(winningCombination[0], 10);\n    const winningCombinationFirstTurnIndex = turns.findIndex(turn => turn.position === firstMoveInWinningCombination);\n\n    return turns[winningCombinationFirstTurnIndex].player;\n  }\n);\n","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\n\nimport Row from './Row';\nimport getIsGameOver from '../redux/selectors/getIsGameOver';\nimport getWinner from '../redux/selectors/getWinner';\nimport getWinningCombination from '../redux/selectors/getWinningCombination';\n\nimport './App.css';\n\nconst App = ({ isGameOver, winner, winningCombination }) => {\n  let headingText = 'Click to play.';\n\n  if (isGameOver) {\n    if (winner === null) {\n      headingText = 'Draw. Click to play again.';\n    } else {\n      headingText = `Player ${winner} wins. Click to play again.`\n    }\n  }\n\n  const headingTextClass = classNames({\n    'heading-text': true,\n    'winner-2': winner === 2,\n  });\n\n  const winnerStreakClass = winningCombination === null ?\n    `main` :\n    `main w${winningCombination.join('')}`\n\n  return (\n    <Fragment>\n      <header className=\"header\">\n        <h1>Tic Tac Toe</h1>\n        <h2 className={headingTextClass}>\n          {headingText}\n        </h2>\n      </header>\n\n      <main className={winnerStreakClass}>\n        <Row positions={[1, 2, 3]} />\n        <Row positions={[4, 5, 6]} />\n        <Row positions={[7, 8, 9]} />\n      </main>\n\n      <footer className=\"footer\">\n        <iframe\n          src=\"https://ghbtns.com/github-btn.html?user=alebelcor&repo=react-tic-tac-toe&type=star&count=false\"\n          title=\"Star this repository on GitHub\"\n          frameBorder=\"0\"\n          scrolling=\"0\"\n          width=\"55\"\n          height=\"20\"\n        ></iframe>\n      </footer>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    isGameOver: getIsGameOver(state),\n    winner: getWinner(state),\n    winningCombination: getWinningCombination(state),\n  }\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(App);\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\n\nimport configureStore from './redux/configureStore';\nimport App from './components/App';\n\nconst store = configureStore({\n  turns: [],\n});\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}